{"version":3,"sources":["main.js"],"names":["labnolThumb","id","thumb","play","replace","labnolIframe","iframe","document","createElement","embed","setAttribute","this","dataset","console","log","parentNode","replaceChild","isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","error","addEventListener","v","getElementsByClassName","n","length","div","innerHTML","onclick","appendChild"],"mappings":";;;;;;;;;;;;;;;;;;CAmBA,WACA,YAoEA,SAAAA,GAAAC,GACA,GAAAC,GAAA,sDACAC,EAAA,iCACA,OAAAD,GAAAE,QAAA,KAAAH,GAAAE,EAGA,QAAAE,KACA,GAAAC,GAAAC,SAAAC,cAAA,UACAC,EAAA,6CACAH,GAAAI,aAAA,MAAAD,EAAAL,QAAA,KAAAO,KAAAC,QAAAH,QACAH,EAAAI,aAAA,cAAA,KACAJ,EAAAI,aAAA,kBAAA,KACAG,QAAAC,IAAAH,MACAA,KAAAI,WAAAC,aAAAV,EAAAK,MA3EA,GAAAM,GAAAC,QAAA,cAAAC,OAAAC,SAAAC,UAEA,UAAAF,OAAAC,SAAAC,UAEAF,OAAAC,SAAAC,SAAAC,MACA,0DAIA,kBAAAC,aACA,WAAAJ,OAAAC,SAAAI,UAAAP,IACAM,UAAAE,cAAAC,SAAA,qBACAC,KAAA,SAAAC,GAEAA,EAAAC,cAAA,WAKA,GAAAN,UAAAE,cAAAK,WAAA,CAGA,GAAAC,GAAAH,EAAAI,UAEAD,GAAAE,cAAA,WACA,OAAAF,EAAAG,OACA,IAAA,YAKA,KAEA,KAAA,YACA,KAAA,IAAAC,OAAA,yDAvBAZ,SAgCA,SAAAa,GACAvB,QAAAwB,MAAA,4CAAAD,KAMA7B,SAAA+B,iBAAA,mBACA,WAEA,IAAA,GADAC,GAAAhC,SAAAiC,uBAAA,WACAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAA,CACA,GAAAE,GAAApC,SAAAC,cAAA,MACAmC,GAAAjC,aAAA,aAAA6B,EAAAE,GAAA7B,QAAAH,OACAkC,EAAAC,UAAA5C,EAAAuC,EAAAE,GAAA7B,QAAAH,OACAkC,EAAAE,QAAAxC,EACAkC,EAAAE,GAAAK,YAAAH","file":"main.min.js","sourcesContent":["/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n\n  document.addEventListener('DOMContentLoaded',\n      function() {\n        var v = document.getElementsByClassName('youtube');\n        for (var n = 0; n < v.length; n++) {\n          var div = document.createElement('div');\n          div.setAttribute('data-embed', v[n].dataset.embed);\n          div.innerHTML = labnolThumb(v[n].dataset.embed);\n          div.onclick = labnolIframe;\n          v[n].appendChild(div);\n        }\n      });\n\n  function labnolThumb(id) {\n    var thumb = '<img src=\"https://i.ytimg.com/vi/ID/hqdefault.jpg\">';\n    var play = '<div class=\"play-button\"></div>';\n    return thumb.replace('ID', id) + play;\n  }\n\n  function labnolIframe() {\n    var iframe = document.createElement('iframe');\n    var embed = 'https://www.youtube.com/embed/ID?autoplay=1';\n    iframe.setAttribute('src', embed.replace('ID', this.dataset.embed));\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('allowfullscreen', '1');\n    console.log(this);\n    this.parentNode.replaceChild(iframe, this);\n  }\n})();\n"]}